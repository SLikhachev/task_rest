https://github.com/postgrespro/pg_probackup/releases/tag/2.2.5

https://github.com/postgrespro/pg_probackup

https://github.com/postgrespro/pg_probackup/blob/master/Documentation.md

only vanilla exe was worked

--- INIT and SETTINGS

pg_probackup init -B C:\Users\Public\znap\db_backup\pg_backup\

pg_probackup add-instance -B C:\Users\Public\znap\db_backup\pg_backup -D C:/"Program Files"/PostgreSQL/9.6/data/ --instance znap

makes it in name db
BEGIN;
CREATE ROLE backup WITH LOGIN;
GRANT USAGE ON SCHEMA pg_catalog TO backup;
GRANT EXECUTE ON FUNCTION pg_catalog.current_setting(text) TO backup;
GRANT EXECUTE ON FUNCTION pg_catalog.pg_is_in_recovery() TO backup;
GRANT EXECUTE ON FUNCTION pg_catalog.pg_start_backup(text, boolean, boolean) TO backup;
GRANT EXECUTE ON FUNCTION pg_catalog.pg_stop_backup(boolean) TO backup;
GRANT EXECUTE ON FUNCTION pg_catalog.pg_create_restore_point(text) TO backup;
GRANT EXECUTE ON FUNCTION pg_catalog.pg_switch_xlog() TO backup;
GRANT EXECUTE ON FUNCTION pg_catalog.pg_last_xlog_replay_location() TO backup;
GRANT EXECUTE ON FUNCTION pg_catalog.txid_current() TO backup;
GRANT EXECUTE ON FUNCTION pg_catalog.txid_current_snapshot() TO backup;
GRANT EXECUTE ON FUNCTION pg_catalog.txid_snapshot_xmax(txid_snapshot) TO backup;
GRANT EXECUTE ON FUNCTION pg_catalog.pg_control_checkpoint() TO backup;
COMMIT;

ALTER ROLE backup WITH REPLICATION;



-- ARCHIVE MODE

1/ Setting up continuous WAL archiving
-------------------------------------------------------
-- add to pg_hba_conf --
host    replication    backup        127.0.0.1/32            md5

-- set in postgresql.conf --
wal_level = replica
archive_mode = on
archive_command = 'pg_probackup archive-push -B E:\pgsql\pg_backup\ --instance znap --wal-file-path=%p --wal-file-name=%f'
==============================================

now we can makes ARCHIVE backup
--------------------------------------------
BACKUP
pg_probackup backup -B  E:\pgsql\pg_backup\ --instance znap -b FULL
====================================

VERIFY copy
-------------------------------------------------
pg_probackup checkdb -B E:\pgsql\pg_backup\ --instance znap
========================================

RESTORING a Cluster
To restore the database cluster from a backup, run the restore command with at least the following options:
----------------------------------------------------------
pg_probackup restore -B  E:\pgsql\pg_backup\ --instance znap -i backup_id
If you omit this option -i , pg_probackup uses the latest valid backup

To restore only one or more databases, run the restore command with the following options:
pg_probackup restore -B backup_dir --instance instance_name --db-include=database_name

================================================



Setting up Cluster Verification
---------------------------------------------------------
CREATE EXTENSION amcheck;
-- not supported yet
=================================================


Additional settings for backup MAKE IT BOFORE FIRST BACKUP
---------------------------------------------------------
Install extension amcheck or amcheck_next in every database of the cluster:

pg_probackup set-config -B C:\Users\Public\znap\db_backup\pg_backup --instance znap -U postgres -d hokuto -w
Connection options:
-U, --pguser=postgres            user name to connect as (default: current local user)
-d, --pgdatabase=hokuto          database to connect (default: username)
-h, --pghost=HOSTNAME            database server host or socket directory(default: 'local socket')
-p, --pgport=PORT                database server port (default: 5432)

pg_probackup set-config -B C:\Users\Public\znap\db_backup\pg_backup  --instance znap --compress-algorithm=zlib --compress-level=5

pg_probackup set-config -B C:\Users\Public\znap\db_backup\pg_backup --instance znap --retention-redundancy=7 --retention-window=7

set  PGPASSWORD = %APPDATA%\postgresql\pgpass.conf


==============================================================

APPLY FOR SPECIFIC BACKUP id
pg_probackup set-backup E:\pgsql\pg_backup\  --instance znap -i backup-id
                 [--ttl] [--expire-time]
      --ttl=ttl                    pin backup for specified amount of time; 0 unpin
                                   available units: 'ms', 's', 'min', 'h', 'd' (default: s)
      --expire-time=time           pin backup until specified time stamp
                                   (example: --expire-time='2024-01-01 00:00:00+03')
=================================================================

pg_probackup show-config -B  E:\pgsql\pg_backup\  --instance znap



BACKUP

pg_probackup archive-push -B E:/pgsql/pg_backup --instance znap --wal-file-path=%p --wal-file-name=%f

pg_probackup backup -B  E:\pgsql\pg_backup\ --instance znap -b FULL


SHOW

pg_probackup show -B E:\pgsql\pg_backup


VALIDATE RESTORE POSSIBILITIES

pg_probackup validate -B   E:\pgsql\pg_backup --instance znap -i Q2A1CV


RESTORE

pg_probackup restore -B backup_dir --instance instance_name -i backup_id

DELETE

pg_probackup delete -B E:\pgsql\pg_backup --instance znap -i Q2A1CV


=========================================================

STREAM mode
----------------------------------------

ALTER ROLE backup WITH REPLICATION
Make sure the parameter max_wal_senders is set high enough to leave at least one session available for the backup process.


pg_probackup backup -B C:\Users\Public\znap\db_backup\pg_backup --instance znap -b FULL --stream --temp-slot